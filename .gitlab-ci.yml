variables:
  AWS_ACCOUNT_ID: 718624127210
  REGISTRY: 718624127210.dkr.ecr.ap-northeast-1.amazonaws.com
  REPOSITORY: doikota/weather-app
  IMAGE_TAG: 1.0.2
  AWS_IAM_ROLE: arn:aws:iam::718624127210:role/gitlab-openidconnect-role

default:
  image: public.ecr.aws/sam/build-nodejs20.x

stages:
  # - Build
  - Assume

# build:
#   stage: Build
#   script:
#     - npm install -D webpack-cli
#     - npm run test
#     - npm run build
#   artifacts:
#     paths:
#       - dist/*

assume:
  stage: Assume
  image:
    name: amazon/aws-cli
    name: public.ecr.aws/sam/build-nodejs20.x
    # name: docker:cli
    name: docker:dind
    # entrypoint: ['']
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  services:
    - docker:dind
  script:
    # - curl -fsSL https://get.docker.com -o install-docker.sh
    # - sh install-docker.sh
    # - service docker start
    # - yum update -y
    # - yum install -y docker
    # - systemctl start docker
    # - usermod -a -G docker ec2-user
    - apk update
    - apk add curl
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${AWS_IAM_ROLE}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"
    - aws sts get-caller-identity
    # - aws configture
    - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 718624127210.dkr.ecr.ap-northeast-1.amazonaws.com
    - docker build . -t $REPOSITORY
    - docker tag $REPOSITORY:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
    - docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
